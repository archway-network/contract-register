name: Metadata Check

on:
  pull_request:
    branches:
      - main

jobs:
  validate-json-schema:
    name: Validate the Metadata JSON schema
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3  
      - name: Validate JSON
        uses: GrantBirki/json-yaml-validate@v2.3.1
        with:
          base_dir: mainnet
          json_schema: ./schemas/metadata.schema.json
          json_exclude_regex: ^(main|test){1}net\/\d\/(?!metadata\.json$).*
          use_gitignore: false

  fetch-modified-metadata:
    name: Fetch modified metadata
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read

    steps:
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v39

      - name: Set metadata files
        id: setfiles
        run: |
          FILES_ARRAY=""
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            FILE_NAME=$(basename $file)
            if [ $FILE_NAME != "metadata.json" ]; then
                continue
            fi
            FILES_ARRAY+="$file,"
          done
          FILES_ARRAY=$(echo $FILES_ARRAY | jq -R -s -c 'split(",")[:-1]')
          echo "metadata_files=${FILES_ARRAY}" >> $GITHUB_OUTPUT
    outputs:
      metadata_files: ${{ steps.setfiles.outputs.metadata_files }}

  build-binary:
    name: Build contract binary
    needs: [fetch-modified-metadata]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJSON(needs.fetch-modified-metadata.outputs.metadata_files) }}

    steps:
      - name: Checking out ${{ matrix.file }}
        uses: actions/checkout@v3
        with:
          sparse-checkout: ${{ matrix.file }}

      - name: Output contents of ${{ matrix.file }}
        id: setmetadata
        run: |
          CONTENTS=$(cat ${{ matrix.file }})
          SOURCE=$(cat ${{ matrix.file }} | jq -r '.source')
          if [ -z "$SOURCE" ]; then
              continue
          fi
          SOURCE_BUILDER=$(cat ${{ matrix.file }} | jq -r '.source_builder')
          if [ -z "$SOURCE_BUILDER" ]; then
              continue
          fi
          #echo "metadata=$CONTENTS" >> $GITHUB_ENV
          echo "count=5" >> $GITHUB_STATE

      - name: Test
        run: |
          echo "The count was ${{ steps.setmetadata.outputs.count }}"
        
      
      # - name: Checkout source code
      #   id: checkoutcode
      #   uses: actions/checkout@v3
      #   with:
      #     repository: ${{ needs.setmetadata.outputs.metadata.source.repository }}
      #     ref: ${{ needs.setmetadata.outputs.metadata.source.tag }}

      # - name: Setup Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Build the binary
      #   run: |
      #     docker run --rm -v "$(pwd)":/code --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry   ${{ needs.setmetadata.outputs.metadata.source_builder.image }}:${{ needs.setmetadata.outputs.metadata.source_builder.tag }}