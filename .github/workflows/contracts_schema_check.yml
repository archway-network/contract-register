name: contracts.json validation

on:
  pull_request:
    branches:
      - main

jobs:
  get-modified-files:
    name: Get modified contracts.json
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read

    steps:
      # Get all the files which have been changed in this PR
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v39

      # Output all the files which were changed and match the path mainnet/*/contracts.json
      - name: Set changed contracts.json files
        id: setfiles
        run: |
          FILES_ARRAY=""
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            FILE_NAME=$(basename $file)
            if [ $FILE_NAME != "contracts.json" ]; then
                continue
            fi
            NETWORK=$(echo $file | cut -d '/' -f 1)
            if [[ "$NETWORK" == "mainnet" ]]; then
              FILES_ARRAY+="$file,"
            else
              continue
            fi
          done
          FILES_ARRAY=$(echo $FILES_ARRAY | jq -R -s -c 'split(",")[:-1]')
          echo "contracts_files=${FILES_ARRAY}" >> $GITHUB_OUTPUT
    outputs:
      contracts_files: ${{ steps.setfiles.outputs.contracts_files }}

  validate-json:
    name: Validate ${{ matrix.file }}
    needs: [get-modified-files]
    runs-on: ubuntu-latest
    if: ${{ needs.get-modified-files.outputs.contracts_files != '[]' && needs.get-modified-files.outputs.contracts_files != '' }}
    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJSON(needs.get-modified-files.outputs.contracts_files) }}

    steps:
      - name: Checking out ${{ matrix.file }}
        uses: actions/checkout@v3

      - name: Install check-jsonschema
        run: pip install check-jsonschema

      # Check if the file matches our expected schema
      - name: Validate ${{ matrix.file }}
        run: check-jsonschema --schemafile schemas/contracts.schema.json ${{ matrix.file }} --color always

  validate-instances:
    name: Validate contract instances
    needs: [get-modified-files]
    runs-on: ubuntu-latest
    if: ${{ needs.get-modified-files.outputs.contracts_files != '[]' && needs.get-modified-files.outputs.contracts_files != '' }}
    strategy:
        fail-fast: false
        matrix:
          file: ${{ fromJSON(needs.get-modified-files.outputs.contracts_files) }}

    steps:
      - name: Checking out ${{ matrix.file }}
        uses: actions/checkout@v3
        with:
            sparse-checkout: ${{ matrix.file }}

      # Check if the given address has the same code id and label on mainnet as well
      - name: Validate ${{ matrix.file }} contents
        run: |
            jq -c '.[]' ${{ matrix.file }} | while read i; do
              ADDRESS=$(echo $i | jq -r '.address')
              LABEL=$(echo $i | jq -r '.label')
              CODE_ID=$(echo "${{ matrix.file }}" | cut -d'/' -f2)

              REST_URL=https://api.mainnet.archway.io/cosmwasm/wasm/v1/contract/${ADDRESS}
              CONTRACT=$(curl -X GET $REST_URL -H  "accept: application/json" | jq -r '.contract_info')
              FETCHED_CODE_ID=$(echo $CONTRACT | jq -r '.code_id')
              FETCHED_LABEL=$(echo $CONTRACT | jq -r '.label')

              echo "➖ $ADDRESS"
              if [[ "$FETCHED_CODE_ID" != "$CODE_ID" ]]; then
                echo "❌ Code ID mismatch for $LABEL ($ADDRESS): expected $CODE_ID, got $FETCHED_CODE_ID"
                exit 1
                return
              fi
              echo "✅ Code ID matched: $FETCHED_CODE_ID"

              if [[ "$FETCHED_LABEL" != "$LABEL" ]]; then
                echo "❌ Label mismatch for $LABEL ($ADDRESS): expected $LABEL, got $FETCHED_LABEL"
                exit 1
                return
              fi
              echo "✅ Contract Label matched: $FETCHED_LABEL"
            done